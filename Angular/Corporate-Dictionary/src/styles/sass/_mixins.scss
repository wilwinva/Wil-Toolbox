$browser-context: 16; // Base Font Size

@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em;
}


@mixin shadow($level: 1) {
    @if $level == 1 {box-shadow: 0 1px 3px rgba(0,0,0,0.05), 0 1px 1px rgba(0,0,0,0.15);} 
    @else if $level == 2 {box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);}
    @else if $level == 3 {box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);}
    @else if $level == 4 {box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);}
    @else if $level == 5 {box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);}
    @else if $level == 0 {box-shadow: 0 0 0 rgba(0,0,0,0.06), 0 0 0 rgba(0,0,0,0.13);}
}

@mixin smi-ease($level: 1) {
    @if $level == 1 { transition-timing-function: cubic-bezier(.55,0,.1,1); } 
    @else if $level == 2 {transition-timing-function: cubic-bezier(.53,.12,.48,.95); }
}


/// Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}


/// Zebra striping a Table Based on PL BASE COLOR!!! Not a tint of the Base
@mixin tableColorize($base-color) {

    $table-zebra-odd : tint($base-color, 80%);
    $table-zebra-even : tint($base-color, 90%);
    $table-row-hover : tint($base-color, 75%);
    $table-border :  tint($base-color, 55%);
    $table-header-color : shade($base-color, 80%);
    $table-header-caret : shade($base-color, 90%);
    
background-color: $table-zebra-even;

table {
	border-bottom:1px solid $table-border;
}
    > thead {
        th {
            color: $table-header-color;
            svg {
                use {
                    fill: $table-header-caret !important;
                }
            }
        }
    }
    > tbody { 
        > tr {
            &:hover {
                background-color: $table-row-hover!important;
            }
            &:nth-of-type(2n+1) {
                background-color: $table-zebra-odd;
            }

            > th, > td {
                border-color: $table-border;
            }
        }
    }

    > tfoot, thead {
        > tr{
            > th, > td {
                border-color: $table-border;
            }
        }

    }
    
}

@mixin paginationColorize($base-color) {
    
    $pagination-bg: tint($base-color, 90%);
    $pagination-bg-active: tint($base-color, 55%);
    $pagination-bg-hover : tint($base-color, 75%);
    $text-color: shade($base-color, 85%);
    $text-color-hover: shade($base-color, 100%);
    
    > li {
        
        > a{
            background-color: $pagination-bg;
            color: $text-color;
            border-color: $pagination-bg-active;
            
            &:hover {
                background-color: $pagination-bg-hover;
                color: $text-color-hover;
                
            }
        }
        
        &.active {
            > a{
                background-color: $pagination-bg-active;
                color: $text-color-hover;
                border-color: $pagination-bg-active;
            }
        }
        
        &.disabled {
            
            > a {
                opacity: 0.5;
                
                &:hover {
                    background-color: $pagination-bg;
                    color: $text-color;
                }
            }
        }
    }
}


    

@mixin snl-icon-state($state: hidden) {
    @if $state == hidden {
        fill-opacity: 0;
        fill: #323940;
    }
    @else if $state == show {
        fill-opacity: 0.5;
        fill: #323940;
    }
    @else if $state == hover {
        fill-opacity: 1;
        fill: #323940;
    }
}


@mixin vertical-align-bottom($position: relative) {
  position: $position;
  top: 100%;
  -webkit-transform: translateY(-100%);
  -ms-transform: translateY(-100%);
  transform: translateY(-100%);
}

